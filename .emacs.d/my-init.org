* My init file

** ヘッダ
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

** leaf
#+begin_src emacs-lisp
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org" . "https://orgmode.org/elpa/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("gnu" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      :init
      (leaf hydra :ensure t)
      (leaf el-get :ensure t)
      (leaf blackout :ensure t)

      :config
      (leaf-keywords-init)))

  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :tag "builtin" "faces" "help"
    :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))

  (leaf cus-start
    :custom ((truncate-lines . t)
	     ;(tool-bar-mode . nil)
	     ;(scroll-bar-mode . nil)
	     ;(inhibit-startup-message . t)
	     (menu-bar-mode . t))
    :config
    (custom-set-faces '(default ((t (:family "UDEV Gothic JPDOC" :foundry "outline" :slant normal :weight normal :height 113 :width normal)))))
    (custom-set-faces '(mode-line ((t (:family "UDEV Gothic JPDOC" :foundry "outline" :slant normal :weight bold :height 113 :width normal)))))
    ;(set-fontset-font t 'japanese-jisx0208 (font-spec :family "BIZ UD明朝"))

    (when window-system (set-frame-size (selected-frame) 120 35))
    (add-to-list 'default-frame-alist '(cursor-type . bar))
    (setq-default line-spacing 2)
    )

  (leaf leaf
    :config
    (leaf leaf-convert :ensure t)
    (leaf leaf-tree
      :ensure t
      :custom ((imenu-list-size . 30)
	       (imenu-list-position . 'left))))
#+end_src

** init
#+begin_src emacs-lisp
  ;(eval-and-compile
  ;  (leaf bytecomp
  ;    :doc "compilation of Lisp code into byte code"
  ;    :tag "builtin" "lisp"
  ;    :custom (byte-compile-warnings . '(cl-functions))))

  (leaf go-mode
    :ensure t)

  (leaf json-mode
    :ensure t)

  (leaf web-mode
    :ensure t
    ;:mode "\\.json\\'"
    ;:hook ((web-mode-hook . lsp))
    :config
    ;(add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
    )

  (leaf company
    :ensure t
    :hook (after-init-hook . global-company-mode)
    :custom ((company-minimum-prefix-length . 1)
	     (company-selection-wrap-around . t)
	     (company-dabbrev-downcase . nil))
    :config
    )

  (leaf lsp-mode
    :ensure t
    :require t
    :hook (go-mode-hook json-mode-hook)
    :custom ((lsp-keymap-prefix . "C-c l"))
    :config
    )

  ;(leaf eglot
  ;  :ensure t
  ;  :hook ((js-mode-hook . eglot-ensure)
  ;	 (typescript-mode-hook . eglot-ensure))
  ;  :config
  ;  (add-to-list 'eglot-server-programs
  ;	       '((js-mode typescript-mode) . ("deno" "lsp" :initializationOptions (:enable t :lint t))))
  ;  )

  (leaf afternoon-theme
    :disabled t
    :ensure t
    :config
    (load-theme 'afternoon t))

  ;(leaf lambda-themes
  ;  :ensure t
  ;  :url "https://github.com/Lambda-Emacs/lambda-themes"
  ;  ;:config
  ;  ;(load-theme 'lambda-light)
  ;  )

  (leaf nyan-mode
    :ensure t
    :custom ((nyan-animate-nyancat . nil)
	     (nyan-wavy-trail . nil))
    :config
    (nyan-mode t))

  (leaf whitespace
    ;:hook (after-init-hook . global-whitespace-mode)
    :custom ((whitespace-style . '(face tabs tab-mark newline newline-mark))))

  (leaf highlight-indent-guides
    :disabled t
    :ensure t
    :hook ((prog-mode-hook . highlight-indent-guides-mode))
    :config
    (custom-set-variables
     '(highlight-indent-guides-method (quote fill))
     '(highlight-indent-guides-responsive (quote top))))

  (leaf mwim
    :ensure t
    :bind (("C-a" . mwim-beginning-of-code-or-line)
	   ("C-e" . mwim-end-of-code-or-line)))

  (leaf delsel
    :doc "delete selection if you insert"
    :tag "builtin"
    :global-minor-mode delete-selection-mode)

  (leaf paren
    :doc "highlight matching paren"
    :tag "builtin"
    :custom ((show-paren-style . 'mixed))
    :global-minor-mode show-paren-mode)

  (leaf rainbow-delimiters
    :ensure t
    :hook prog-mode-hook
    :config
    (add-hook 'emacs-startup-hook
	      (lambda ()
		(progn
		  (require 'cl-lib)
		  (require 'color)
		  (cl-loop
		   for index from 1 to rainbow-delimiters-max-face-count
		   do
		   (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
		     (cl-callf color-saturate-name (face-foreground face) 20)))))))

  (leaf expand-region
    :ensure t
    :bind (("C-=" . er/expand-region)
	   ("C--" . er/contract-region)))

  (leaf line-number-mode
    :custom
    ((linum-format . "%5d ")))

  (leaf magit
    :ensure t
    :require t)

  (leaf git-gutter
    :ensure t
    :require t
    :config
    (global-git-gutter-mode 0))

  (leaf macrostep
    :ensure t
    :bind (("C-c e" . macrostep-expand)))

  (leaf recentf
    :ensure t
    :hook (after-init-hook . recentf-mode)
    :config
    (setq recentf-auto-cleanup 'never)
    (setq recentf-max-saved-items 2000)
    (setq recentf-auto-save-timer (run-with-idle-timer 30 t 'recentf-save-list))
    (setq recentf-save-file (expand-file-name "~/var/emacs/recentf")))

  (setq backup-directory-alist
	'((".*" . "~/var/emacs/backup")))
  (setq auto-save-file-name-transforms
	'((".*" "~/var/emacs/autosave/" t)))  ;; 末尾のスラッシュ必要
  (setq create-lockfiles nil)
  (setq kill-whole-line t)
  ;(fset 'yes-or-no-p 'y-or-n-p)

  ;(setq custom-file "~/.emacs.d/custom.el")
  ;(load custom-file t)

  (unless window-system
    (menu-bar-mode -1))
  ;(setq line-spacing 2.0)

  (leaf-keys (
	      ;("C-h" . delete-backward-char)
	      ("C-x C-b" . electric-buffer-list)
	      ))

  ;(load-theme 'wombat t)
  (load-theme 'leuven t)
#+end_src

** 最後に
#+begin_src emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+end_src
