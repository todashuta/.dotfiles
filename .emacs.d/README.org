* My init file

** ヘッダ
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

** 言語設定
#+begin_src emacs-lisp
(set-language-environment "Japanese")
(prefer-coding-system 'utf-8)
(set-default 'buffer-file-coding-system 'utf-8-unix)
#+end_src

** leaf.el
#+begin_src emacs-lisp
;; <leaf-install-code>
(eval-and-compile
  (customize-set-variable
   'package-archives '(("org"   . "https://orgmode.org/elpa/")
                       ("melpa" . "https://melpa.org/packages/")
                       ("gnu"   . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless (package-installed-p 'leaf)
    (package-refresh-contents)
    (package-install 'leaf))

  (leaf leaf-keywords
    :ensure t
    :config
    (leaf hydra :ensure t)
    (leaf el-get :ensure t
      :custom ((el-get-git-shallow-clone . t)))
    (leaf blackout :ensure t)

    :config
    (leaf-keywords-init)))
;; </leaf-install-code>

(leaf leaf
  :config
  (leaf leaf-convert :ensure t)
  (leaf leaf-tree
    :ensure t
    :custom ((imenu-list-size . 30)
             (imenu-list-position . 'left))))
#+end_src

** init

#+begin_src emacs-lisp
;; (eval-and-compile
;;   (leaf bytecomp
;;     :doc "compilation of Lisp code into byte code"
;;     :tag "builtin" "lisp"
;;     :custom (byte-compile-warnings . '(cl-functions))))

(leaf cus-edit
  :doc "tools for customizing Emacs and Lisp packages"
  :tag "builtin" "faces" "help"
  :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))

(leaf cus-start
  :custom (
           ;; (tool-bar-mode           . nil)
           ;; (scroll-bar-mode         . nil)
           ;; (inhibit-startup-message . t)
           (truncate-lines                 . t)
           (line-number-mode               . t)
           (column-number-mode             . t)
           (scroll-margin                  . 5)
           (kill-whole-line                . t)
           (create-lockfiles               . nil)
           (backup-directory-alist         . '((".*" . "~/var/emacs/backup")))
           (auto-save-file-name-transforms . '((".*" "~/var/emacs/autosave/" t)))  ; 末尾のスラッシュ必要
  )
  :config
  (custom-set-faces
   '(default
      ((t (:family "UDEV Gothic JPDOC" :foundry "outline" :slant normal :weight normal :height 113 :width normal)))))
  (custom-set-faces
   '(mode-line
     ((t (:family "UDEV Gothic JPDOC" :foundry "outline" :slant normal :weight bold :height 113 :width normal)))))
  (custom-set-faces
   '(org-block
     ((t (:family "UDEV Gothic JPDOC" :foundry "outline" :slant normal :weight normal :height 100 :width normal)))))
  ;; (set-fontset-font t 'japanese-jisx0208 (font-spec :family "BIZ UD明朝"))

  (menu-bar-mode (if window-system 1 -1))
  (when window-system (set-frame-size (selected-frame) 120 35))
  (add-to-list 'default-frame-alist '(cursor-type . bar))
  (setq-default line-spacing 2)
  )

(leaf generic-x
  :require t)

(leaf go-mode
  :ensure t)

(leaf json-mode
  :ensure t)

(leaf web-mode
  :ensure t
  ;; :mode "\\.json\\'"
  ;; :hook ((web-mode-hook . lsp))
  :config
  ;; (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
  )

(leaf company
  :ensure t
  :hook (after-init-hook . global-company-mode)
  :custom ((company-minimum-prefix-length . 1)
           (company-selection-wrap-around . t)
           (company-dabbrev-downcase      . nil))
  :config
  )

(leaf lsp-mode
  :ensure t
  :hook (go-mode-hook json-mode-hook)
  :custom ((lsp-keymap-prefix . "C-c l"))
  :config
  )

;; (leaf eglot
;;   :ensure t
;;   :hook ((js-mode-hook . eglot-ensure)
;;          (typescript-mode-hook . eglot-ensure))
;;   :config
;;   (add-to-list 'eglot-server-programs
;;                '((js-mode typescript-mode) . ("deno" "lsp" :initializationOptions (:enable t :lint t))))
;;   )

(leaf nyan-mode
  :disabled t
  :ensure t
  :custom ((nyan-animate-nyancat . nil)
           (nyan-wavy-trail      . nil))
  :config
  (nyan-mode t))

(leaf mlscroll
  :disabled t
  :ensure t
  :config (mlscroll-mode 1))

(leaf whitespace
  ;; :hook (after-init-hook . global-whitespace-mode)
  :custom ((whitespace-style . '(face tabs tab-mark newline newline-mark))))

(leaf highlight-indent-guides
  :disabled t
  :ensure t
  :hook ((prog-mode-hook . highlight-indent-guides-mode))
  :custom ((highlight-indent-guides-method     . 'fill)
           (highlight-indent-guides-responsive . 'top)))

(leaf mwim
  :ensure t
  :bind (("C-a" . mwim-beginning-of-code-or-line)
         ("C-e" . mwim-end-of-code-or-line)))

(leaf delsel
  :doc "delete selection if you insert"
  :tag "builtin"
  :global-minor-mode delete-selection-mode)

(leaf paren
  :doc "highlight matching paren"
  :tag "builtin"
  :custom ((show-paren-style . 'mixed))
  :global-minor-mode show-paren-mode)

(leaf rainbow-delimiters
  :ensure t
  :hook prog-mode-hook
  :config
  (add-hook 'emacs-startup-hook
            (lambda ()
              (progn
                (require 'cl-lib)
                (require 'color)
                (cl-loop
                 for index from 1 to rainbow-delimiters-max-face-count
                 do
                 (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
                   (cl-callf color-saturate-name (face-foreground face) 20)))))))

(leaf expand-region
  :ensure t
  :bind (("C-=" . er/expand-region)
         ("C--" . er/contract-region)))

(leaf linum
  :custom
  ((linum-format . "%5d ")))

(leaf display-line-numbers
  :custom ((display-line-numbers-minor-tick . 0)
           (display-line-numbers-major-tick . 0)
           (display-line-numbers-grow-only  . t))
  :config
  (global-display-line-numbers-mode 0))

(leaf magit
  :ensure t)

(leaf git-gutter
  :ensure t
  :config
  (global-git-gutter-mode 0))

(leaf macrostep
  :ensure t
  :bind (("C-c e" . macrostep-expand)))

(leaf recentf
  :ensure t
  :hook (after-init-hook . recentf-mode)
  :config
  (setq recentf-auto-cleanup 'never)
  (setq recentf-max-saved-items 2000)
  (setq recentf-auto-save-timer (run-with-idle-timer 30 t 'recentf-save-list))
  (setq recentf-save-file (expand-file-name "~/var/emacs/recentf")))

(leaf ido-vertical-mode
  :ensure t
  :custom ((ido-enable-flex-matching . t)
           (ido-vertical-define-keys . 'C-n-and-C-p-only))
  :config
  (ido-mode 1)
  (ido-vertical-mode 1))

(leaf org-mode
  :custom ((org-use-speed-commands                 . t)
           (org-hide-leading-stars                 . nil)
           (org-src-fontify-natively               . t)
           (org-fontify-whole-heading-line         . t)
           (org-fontify-whole-block-delimiter-line . nil)
           (org-startup-folded                     . 'content)
           (org-src-tab-acts-natively              . nil)
           ;; (org-src-preserve-indentation           . t)
           ;; (org-edit-src-content-indentation       . 0)
           )
  :config
  ;; (advice-add
  ;;  'org-edit-special
  ;;  :after
  ;;  (lambda (&rest r) (maximize-window) (linum-mode))
  ;;  '((name . "my-org-edit-special-with-maximize-window")))
  (add-hook 'org-src-mode-hook
            (lambda ()
              (maximize-window)
              (display-line-numbers-mode 1))))

(leaf slime
  :ensure t
  :custom ((inferior-lisp-program . "sbcl"))
  :config
  (slime-setup '(slime-repl slime-fancy slime-banner)))

(leaf end-mark
  :init
  (unless (locate-library "end-mark")
    (el-get-bundle end-mark
      :url "https://github.com/tarao/elisp.git"
      :features end-mark))
  :config
  (global-end-mark-mode))

(leaf undo-tree
  :ensure t
  :config
  (setq undo-tree-history-directory-alist
        '(("." . "~/var/emacs/undo-tree")))
  (global-undo-tree-mode 1))

(leaf volatile-highlights
  :ensure t
  :config
  (volatile-highlights-mode t))

(leaf beacon
  :disabled t
  :ensure t
  :config
  (add-hook 'after-init-hook
            '(lambda ()
               (setq beacon-color (face-attribute 'highlight :background))))
  (beacon-mode 1))

(leaf doom-modeline
  :ensure t
  :custom ((doom-modeline-icon        . nil)
           (doom-modeline-indent-info . t)
           (doom-modeline-height      . 20)
           (doom-modeline-hud         . t))
  :config
  (doom-modeline-mode 1))

(leaf paredit
  :ensure t)

;; (fset 'yes-or-no-p 'y-or-n-p)

;; (setq custom-file "~/.emacs.d/custom.el")
;; (load custom-file t)

;; (setq line-spacing 2.0)

;; (global-hl-line-mode 1)

(leaf-keys (
            ;; ("C-h"     . delete-backward-char)
            ("C-x C-b" . electric-buffer-list)
            ("C-l"     . (lambda ()
                           (interactive)
                           (when (fboundp 'git-gutter) (git-gutter))
                           (recenter-top-bottom)
                           ;; (my-blink-hl-line)
                           (when (fboundp 'vhl/add) (vhl/add (point) (1+ (point))))
                           ))
            ("<next>"  . scroll-up-line)
            ("<prior>" . scroll-down-line)
            ))
#+end_src

*** 日本語入力

**** ddskk

=M-x skk-get= で辞書ファイルを一括ダウンロードできる。

#+begin_src emacs-lisp
(leaf ddskk
  :disabled t
  :ensure t
  :require t
  :custom (
           (default-input-method           . "japanese-skk")  ; C-\ で使えるようにする
           ;; (skk-status-indicator           . 'minor-mode)
           (skk-indicator-use-cursor-color . nil)
           )
  ;; :bind (("C-c C-j" . skk-mode))
  :config
  (let* ((jisyo-dir (file-name-as-directory skk-get-jisyo-directory))
         (jisyo-path (concat jisyo-dir "SKK-JISYO.L")))
    (when (file-exists-p jisyo-path)
      (setq skk-large-jisyo jisyo-path))))
#+end_src

**** tr-ime (Windows)

#+begin_src emacs-lisp
(leaf tr-ime
  :when (eq window-system 'w32)
  :ensure t
  :custom ((w32-ime-mode-line-state-indicator      . "[--]")
           (w32-ime-mode-line-state-indicator-list . '("[--]" "[あ]" "[--]")))
  :config
  (tr-ime-advanced-install) ;; (tr-ime-standard-install)
  (setq default-input-method "W32-IME")
  (w32-ime-initialize)
  (modify-all-frames-parameters '((ime-font . "UDEV Gothic JPDOC-11"))))
#+end_src

** カラーテーマ
#+begin_src emacs-lisp
;; (load-theme 'wombat t)

(leaf afternoon-theme
  :disabled t
  :ensure t
  :config
  (load-theme 'afternoon t))

(leaf lambda-themes
  :disabled t
  :init
  (unless (locate-library "lambda-themes")
    (el-get-bundle lambda-emacs/lambda-themes))
  :custom ((lambda-themes-set-variable-pitch . nil))
  :config
  (require 'lambda-themes)
  (load-theme 'lambda-light-faded t)

  (set-face-attribute 'outline-1 nil :height 1.1)
  (set-face-attribute 'outline-2 nil :height 1.1)
  (set-face-attribute 'outline-3 nil :height 1.1)
  (set-face-attribute 'outline-4 nil :height 1.1))

(leaf *theme-leuven
  :disabled t
  :custom ((leuven-scale-outline-headlines . nil))
  :config
  (load-theme 'leuven t)

  (set-face-background 'secondary-selection "#FFFFBC")

  (set-face-background 'line-number "gray97")
  (set-face-attribute 'line-number-current-line nil
                      :weight 'bold
                      :foreground "black"
                      :background (face-attribute 'highlight :background)))

(leaf apropospriate-theme
  :ensure t
  :config
  (load-theme 'apropospriate-light t))
#+end_src

** ビープ音の代わりにモードラインを点滅させる
#+begin_src emacs-lisp
(setq visible-bell nil
      ring-bell-function 'my-flash-mode-line)
(defun my-flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src

** コマンド
#+begin_src emacs-lisp
(defun edit-my-init ()
  (interactive)
  (find-file (expand-file-name (concat user-emacs-directory "README.org"))))

(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (when (fboundp 'org-mode-restart)
    (org-mode-restart)))
#+end_src

** その他関数

#+begin_src emacs-lisp :tangle no
(defun my-blink-hl-line ()
  ;; (unless (fboundp 'hl-line-mode) (require 'hl-line-mode))
  (unless (boundp 'hl-line-mode)
    (setq hl-line-mode nil))
  (unless hl-line-mode
    (run-with-timer
     0.1 nil
     #'(lambda ()
         (hl-line-mode 1)
         (run-with-timer
          0.1 nil
          #'(lambda ()
              (hl-line-mode 0)
              (run-with-timer
               0.1 nil
               #'(lambda ()
                   (hl-line-mode 1)
                   (run-with-timer
                    0.1 nil
                    #'(lambda ()
                        (hl-line-mode 0)))
                   ))
              ))
         ))
    ))
#+end_src

** 最後に
#+begin_src emacs-lisp
(provide 'init)
;;; init.el ends here
#+end_src

** ローカルの設定があれば読み込む
#+begin_src emacs-lisp
(load (expand-file-name(concat user-emacs-directory "init-local.el")) t)
#+end_src

# Local Variables:
# org-src-preserve-indentation: t
# End:
