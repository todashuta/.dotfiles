" vimrc

let s:is_windows = has('win32')
let $VIMDIR = expand(s:is_windows ? '~/vimfiles' : '~/.vim')

if has('vim_starting')
  silent! autocmd! vimrcEx
  filetype off
  filetype plugin indent off
  if s:is_windows
    "let $HOME = $HOME  " See :h $HOME-windows
    "let $PATH .= ';'.expand('~/bin')
    "let $PATH .= ';'.'C:\Windows\Microsoft.NET\Framework64\v4.0.30319'
  endif
  let s:myrtp = join(glob($VIMDIR.'/plugins/*[^~]', 0, 1), ',')
  if s:myrtp != ''
    let &runtimepath .= ','.s:myrtp
  endif
  unlet s:myrtp
  "helptags ALL
endif

if &encoding !=? 'utf-8' && !filereadable($VIMDIR.'/use_system_encoding.txt')
  let &termencoding = &encoding
  set encoding=utf-8
endif
scriptencoding utf-8  " Must after set of 'encoding'.

if exists('+shellslash')
  set noshellslash
endif

if s:is_windows
  language messages en
else
  language messages C
endif

set viminfo+=n~/var/vim/.viminfo
set swapfile directory=~/var/vim/swap
set undofile undodir=~/var/vim/undo
set nobackup writebackup backupdir=~/var/vim/backup

set helplang=ja,en
set nofixendofline
set history=800
set noexpandtab tabstop=4 shiftwidth=4 softtabstop=0 shiftround
set incsearch ignorecase smartcase wrapscan
set hlsearch
set autoindent
set showmatch
set wildmenu
set laststatus=2 cmdheight=2 showcmd ruler
set nowrap
set list listchars=tab:>-,trail:-,extends:>,precedes:<,nbsp:%
set nonumber norelativenumber
set title
set backspace=indent,eol,start
set scrolloff=5 sidescrolloff=16
let g:FFTable = { 'dos': 'CR+LF(dos)', 'unix': 'LF(unix)', 'mac': 'CR(mac)' }
let &statusline = '%#WarningMsg#%{&paste?"*PASTE*":""}%*#%n%{MyGitStauts()} %#WarningMsg#%{&modified?"*":""}%*%<%t%h%r [%{toupper(&fenc==""?(&enc."*"):&fenc).(&bomb?"(BOM)":"")};%{g:FFTable[&ff].(&eol?"":"-NoEOL")}] 0x%{FencB()}%= %y %l/%LL %2c%VC %3p%%'
let &grepprg = s:is_windows ? 'jvgrep.exe -I -C' : 'grep -rnIH --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude=tags'
set grepformat& grepformat^=%f:%l:%c:%m
set wildignore& wildignore+=*.exe,*.dll,*.zip,*.mp3,Thumbs.db,*.xls,*.xlsx,*.eml,*.fol,*.rd,*.rm,*.rs,*.3dm,*.3dmbak,*.ods,*.odp,*.psd,*.pdf,*.bmp,*.jpg,*.jpeg,*.gif,*.png
set suffixes+=.rd,.exe,.dll,.pdf,.jpg,.jpeg,.gif,.zip,.png,.rs
set hidden
set clipboard+=unnamed
set diffopt& diffopt+=vertical
if &diffopt =~# 'internal' && has("patch-8.1.0502")
  set diffopt+=algorithm:histogram,indent-heuristic
else
  set diffexpr=diff#histogramdiffexpr()  " https://github.com/ynkdir/vim-diff
endif
set timeoutlen=2000
set matchpairs+=<:>,「:」,【:】,『:』,（:）,＜:＞
set cscopetag tags& tags-=tags tags+=./tags;
set pumheight=10
set cryptmethod=blowfish2
set noequalalways
set shortmess-=S
set t_fd= t_fe=  " :h xterm-focus-event
silent! set nrformats= nrformats+=unsigned
set updatetime=500

"cnoremap          <C-x>       <C-r>=fnamemodify(@%,':h:~:.').(exists('+shellslash')&&!&shellslash?'\':'/')<CR>
cnoremap          <C-x>       <C-r>=(@%==''?'.':fnamemodify(@%,':~:.:h')).(exists('+shellslash')&&!&shellslash?'\':'/')<CR>
cnoremap          <C-p>       <Up>
cnoremap          <C-n>       <Down>
inoremap <expr>   <C-Space>   (!pumvisible() && &l:omnifunc != '') ? "\<C-x>\<C-o>" : "\<C-n>"
inoremap <silent> <ESC>       <ESC>:set iminsert=0<CR>
inoremap          <C-@>       <Nop>
nnoremap          <C-h>       :<C-u>h<Space>
map               Q           <Nop>
nnoremap          s           <Nop>
nnoremap          S           <Nop>
nnoremap          s/          :<C-u>silent grep!<Space>
nnoremap          sa          :<C-u>silent grepadd!<Space>
nnoremap          s?          :<C-u>/j **/* <Bar> cwindow<Home>noautocmd vimgrep /<C-f>
nnoremap          sA          :<C-u>/j **/* <Bar> cwindow<Home>noautocmd vimgrepadd /<C-f>
nnoremap <silent> <Esc><Esc>  :<C-u>let v:hlsearch = !v:hlsearch<CR>
nnoremap          <C-l>       :<C-u>SignifyRefresh<CR>:diffupdate<CR><C-l>

if s:is_windows
  nnoremap  se      :<C-u>Explorer<Space>
  nnoremap  sE      :<C-u>Explorer!<CR>
  nnoremap  <C-w>N  :<C-u>!start gvim.exe<CR>
endif

nnoremap  sr  :<C-u>CtrlPMRUFiles<CR>
nnoremap  sb  :<C-u>CtrlPBuffer<CR>
nnoremap  sf  :<C-u>CtrlPCurWD<CR>
nnoremap  sF  :<C-u>CtrlPCurFile<CR>

nnoremap  SG  :<C-u>Git<CR>

augroup vimrc
  autocmd!
  autocmd QuickFixCmdPost               [^l]*  botright cwindow | redraw!
  "autocmd VimEnter,WinEnter,ColorScheme *      highlight MatchParen guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE term=underline cterm=underline gui=underline
  autocmd VimEnter,WinEnter,ColorScheme *      highlight QuickFixLine guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE term=underline cterm=underline gui=underline
  autocmd VimEnter,WinEnter,ColorScheme *      if !has('gui_running') | execute 'highlight Pmenu ctermbg=3' | endif
  autocmd FileType                      *      if &l:omnifunc == '' | setlocal omnifunc=syntaxcomplete#Complete | endif
  "autocmd VimEnter,WinEnter,ColorScheme *      if !has('gui_running') | execute 'highlight Normal ctermbg=NONE' | endif
augroup END

command!       CdCurrent               cd %:p:h
command!       DiffOrig                vert new | set bt=nofile | let b:is_difforigbuf = 1 | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
command!       DiffOrigOff             diffoff! | windo if get(b:, 'is_difforigbuf') | bwipeout | endif
command!       EnableSyntaxcomplete    setlocal omnifunc=syntaxcomplete#Complete
command!       NrformatsAlphaToggle    exe 'setlocal nf'.(&nf =~# 'alpha' ? '-=' : '+=').'alpha nf?'
command!       PackUpdate              source $VIMDIR/packinit.vim | call minpac#update('', {'do': 'call minpac#status()'})
command!       PackClean               source $VIMDIR/packinit.vim | call minpac#clean()
command!       PackEdit                tabedit $VIMDIR/packinit.vim
command!       Swapfiles               echo iconv(vimproc#system('vim -r'), &tenc, &enc)
command!       LineNumberToggle        let [&l:rnu, &l:nu] = (&l:rnu || &l:nu) ? [0, 0] : [1, 1]
command! -bang RemoveInvalidQfixItems  call setqflist(filter(copy(getqflist()), 'v:val.valid'), (<bang>0 ? 'r' : ' '))

function! s:term(cmd, dir, bang, vertical)
  let cwd = (a:dir != '' ? a:dir : (a:bang ? expand('%:p:h') : getcwd()))
  topleft call term_start(a:cmd, { 'vertical': a:vertical, 'term_finish': 'close', 'cwd': cwd, 'env': { 'VIM_TERMINAL': v:version } })
endfunction

command! -bang -complete=dir -nargs=? LTerminal  call s:term(&shell, <q-args>, <bang>0, 1)
command! -bang -complete=dir -nargs=? TTerminal  call s:term(&shell, <q-args>, <bang>0, 0)

if s:is_windows
  function! s:start(cmd, dir, bang)
    let cwd = (a:dir != '' ? a:dir : (a:bang ? expand('%:p:h') : getcwd()))
    call term_start(a:cmd, { 'term_finish': 'close', 'hidden': 1, 'cwd': cwd })
  endfunction

  command! -bang -complete=dir -nargs=? Cmd          execute 'silent !start cmd.exe /k pushd' tr((<q-args> != '' ? fnamemodify(<q-args>, ':p:h') : (<bang>0 ? expand('%:p:h') : getcwd())), '/', '\')
  command! -bang -complete=dir -nargs=? Explorer     call s:start('explorer.exe .', <q-args>, <bang>0)
  command!                     -nargs=1 MyCd         execute 'cd '.iconv(<q-args>, 'cp932', &enc)
  command! -bang -complete=dir -nargs=? PowerShell   call s:start('powershell.exe -Command "Start-Process powershell.exe"', <q-args>, <bang>0)
  command! -bang -complete=dir -nargs=? LTerminalPS  call s:term('powershell.exe', <q-args>, <bang>0, 1)
  command! -bang -complete=dir -nargs=? TTerminalPS  call s:term('powershell.exe', <q-args>, <bang>0, 0)
endif

function! FencB()
  let c = matchstr(getline('.'), '.', col('.')-1)
  if c != ''
    let c = iconv(c, &enc, &fenc)
    return s:byte2hex(s:str2byte(c))
  else
    return '0'
  endif
endfunction
function! s:str2byte(str)
  return map(range(len(a:str)), 'char2nr(a:str[v:val])')
endfunction
function! s:byte2hex(bytes)
  return join(map(copy(a:bytes), 'printf("%02X", v:val)'), '')
endfunction

function! MyGitStauts()
  let l:name = gitbranch#name()
  let l:type = getbufvar('', 'fugitive_type')
  if l:name ==# '' && l:type ==# ''
    return ''
  endif
  if l:type !=# ''
    let l:type = '(' . l:type . ')'
  endif
  if l:name !=# ''
    let l:name = ':' . l:name
  endif
  return ' [Git' . l:type . l:name . ']'
endfunction

let g:loaded_matchparen = 1
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:pascal_delphi = 1  " To highlight //-style comment
let g:is_bash = 1  " See :h ft-bash-syntax

" Packages
"packadd! matchit
packadd! ctrlp.vim
packadd! html5.vim
packadd! sonictemplate-vim
packadd! vim-jsx-pretty
packadd! syntax-vim-ex
packadd! vim-css3-syntax
packadd! vim-diff
packadd! vim-lucius
packadd! vim-color-spring-night
packadd! tokyonight-vim
packadd! vim-niceblock
packadd! vim-textobj-user
packadd! vim-textobj-syntax
packadd! vim-textobj-python
packadd! vim-textobj-multiblock
packadd! vim-quickrun
packadd! vim-signify
packadd! vim-zenspace
packadd! vim-fugitive
packadd! vim-parenmatch
packadd! vim-cursorword
packadd! async.vim
packadd! asyncomplete.vim
packadd! asyncomplete-lsp.vim
packadd! vim-lsp
packadd! vim-lsp-settings
packadd! vim-lsp-icons
packadd! vim-gitbranch
packadd! vim-toml
packadd! vim-findroot
packadd! switch.vim
packadd! vim-operator-user
packadd! vim-operator-replace
packadd! vim-operator-surround

if exists('##TextChangedP')
  packadd! vim-vsnip
  packadd! vim-vsnip-integ
endif

let g:ctrlp_map = ''
let g:ctrlp_mruf_max = 512
let g:gruvbox_italic = 0
let g:sonictemplate_vim_template_dir = expand($VIMDIR.'/template')
let g:quickrun_config = {}
let g:quickrun_config['_'] = {
      \   'runner': (exists('*ch_close_in') ? 'job' : 'vimproc'),
      \   'outputter/buffer/split': 'botright',
      \   'hook/time/enable': 1,
      \ }
let g:signify_skip = {'vcs': {'allow': ['git']}}
let g:switch_mapping = 'gs'

xnoremap <expr> gr  niceblock#force_blockwise('r')
map Qr  <Plug>(operator-replace)

omap aa  <Plug>(textobj-multiblock-a)
omap ii  <Plug>(textobj-multiblock-i)
xmap aa  <Plug>(textobj-multiblock-a)
xmap ii  <Plug>(textobj-multiblock-i)

map <silent>Sa  <Plug>(operator-surround-append)
map <silent>Sd  <Plug>(operator-surround-delete)
map <silent>Sr  <Plug>(operator-surround-replace)

if has('vim_starting') && !has('gui_running')
  if s:is_windows
    colorscheme industry
  else
    if has('termguicolors')
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      "let &t_8f = tr(&t_8f, ';', ':')
      "let &t_8b = tr(&t_8b, ';', ':')
      set termguicolors
      let g:tokyonight_disable_italic_comment = 1
      let g:tokyonight_transparent_background = 1
      let g:tokyonight_menu_selection_background = 'blue'
      silent! colorscheme tokyonight
    else
      colorscheme ron
    endif
  endif
endif

let g:lsp_log_file = expand('~/var/vim/vim-lsp.log')
let g:asyncomplete_log_file = expand('~/var/vim/asyncomplete.log')
let g:lsp_diagnostics_echo_cursor = 1
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  setlocal tagfunc=lsp#tagfunc

  nmap <buffer> K   <Plug>(lsp-hover)
  nmap <buffer> gd  <Plug>(lsp-definition)

  imap <buffer><C-space>  <Plug>(asyncomplete_force_refresh)

  "nnoremap <silent><buffer> [e  :<C-u>LspPreviousDiagnostic<CR>
  "nnoremap <silent><buffer> ]e  :<C-u>LspNextDiagnostic<CR>
endfunction
autocmd vimrc User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
autocmd vimrc User lsp_float_opened call popup_setoptions(
      \ lsp#ui#vim#output#getpreviewwinid(),
      \ {
      \   'borderchars': ['-', '|', '-', '|', '+', '+', '+', '+'],
      \ })
let s:npm_available = executable('npm')
let g:lsp_settings = {
      \   'efm-langserver': {
      \     'cmd': [lsp_settings#exec_path('efm-langserver'), '-c='.$VIMDIR.'/efm-langserver-config.yaml'],
      \     'disabled': !executable('go') || 0,
      \   },
      \   'clangd': {
      \     'cmd': ['clangd-6.0'],
      \     'disabled': !executable('clangd-6.0') || 0,
      \   },
      \   'intelephense': {
      \     'disabled': !s:npm_available || 0,
      \     'workspace_config': {
      \       'intelephense': {
      \         'stubs': ['wordpress'],
      \       }
      \     }
      \   },
      \   'vim-language-server': {
      \     'disabled': !s:npm_available || 0,
      \   },
      \   'typescript-language-server': {
      \     'disabled': !s:npm_available || 0,
      \   },
      \   'json-languageserver': {
      \     'disabled': !s:npm_available || 0,
      \   },
      \ }

autocmd vimrc FileType json
      \ call s:join_block_keymaps()
function! s:join_block_keymaps()
  nnoremap <buffer> <F9>    :<C-u>normal! v%J+<CR><Esc>
  nnoremap <buffer> <S-F9>  :<C-u>call feedkeys("vi[:g/{$/normal! v%J<Bslash><lt>CR>0zz", 'n')<CR>
endfunction

autocmd vimrc FileType json
      \ call s:set_json_indent()
function! s:set_json_indent()
  call cursor(1, 1)
  if search('\t', 'Wnc', 0, 20) > 0
    " use tab indentation (global value)
  else
    setlocal expandtab softtabstop=2 shiftwidth=2
  endif
endfunction

if exists('##OptionSet')
  autocmd vimrc OptionSet diff
        \   if [v:option_old, v:option_new] == ['0', '1']
        \ |   syntax off
        \ | else
        \ |   syntax on
        \ | endif
        \ | silent! call parenmatch#highlight()
        \ | silent! call cursorword#highlight()
endif

"set pythonthreedll=C:/Python37/python37.dll
"set pythonthreedll=~/scoop/apps/python/current/python310.dll
"packadd! vimdoc-ja

let s:vimrclocal = $MYVIMRC.'_local'
if filereadable(s:vimrclocal)
  execute 'source' s:vimrclocal
endif

filetype plugin indent on
syntax enable
set secure

" vim: set et ts=2 sts=2 sw=2 :
